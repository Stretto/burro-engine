#+TITLE: Project Burro Game Engine Implementation TODO
#+OPTIONS: todo:t

Here is the way forward for my strange game engine.

The current sub-task
- Choose a resolution
  - 480x270 is 1/4 of 1920x1080
    - 80 cols of 480 is 6 pixels per character cell
    - misc-fixed comes in 6x10, 6x12 and 6x13 for 27, 22, and 20 rows respectively
    - old X11 fixed is 6x13
  - 352x288 is CIF
    - 6x12 font gives 58c 24r
  - 176x144 is QCIF 
    - 6x9 font give 29c 16r
  - 640x480 is VGA
    - 8x13 font give 80c 36r
- Create a 4-layer TMX map and PNG spritesheet
- Put PNG, TMX and JS in PAK files
- Interpret JS on startup
- Add JS func to create a TMX object from a TMX in the PAK file
- Add JS func to update BG surface with a TMX object
- Add functions in main.js to load up the TMX object and update the BG
- Add JS func to send controller info to interpreter
- Add JS func to move BG layers
- Add functionality in main.js to scroll BG with controller input

* Console Layer
  Create a bitmapped-font on-screen console for display text.
** DONE Write text drawing primitives in Cairo
** DONE Write ECMA-48 parser
** DONE Make a font

* Console: JS
  Express a JS console with command line editing, command-line history,
  and maybe even some tab completion.
** DONE Hook console IO into SpiderMonkey command requests
** DONE Make readline-like functionality work
** TODO Tab Completion

* Resource File
  I'm using libiso9660++
** DONE Functions to extract subfiles from ISO
** TODO Scripts to assemble the ISO files from TMX, PNG, WAV, and JS
** DONE Write a Filename-to-ID map class.
** DONE Populate a Filename-to-ID class from the contents of the reasource file

* Resource Cache
  The resource cache loads TMX, PNG, JS, and WAV from the PAK file.
  It stores them in their intermediate forms, TmxMap classes, Cairo
  surfaces, JS text, and SDL_Mixer chuncks respectively
** DONE Use Filename-to-ID map
** TODO Loader for WAV -> SDL_Mixer chunk
** TODO Loader for JS
** DONE Loader for PNG -> Cairo surface
** TODO Loader for TMX -> TmxMap
** TODO JS Binding for loader

* Renderer
  Switching to TileD as the level editor and using the TMX classes from
  tmxparser means that the Cairo renderer needs to be modified.
** TODO Make 4-z-level background class
*** TODO Make image backend for 4 bg layers
*** TODO Have coordinate transform to paint BG layers during OnPaint()
*** TODO C++/JS Binding for BG
** TODO Helper functions to render background layers from TMX data and Resource Cache
** TODO C++/JS Binding for TMX-to-BG updating

* Critical Parameters List
  A list of booleans, integer, fixed-point, or thunk variables that can be
  modified by the INI files and maybe a Debug Menu
** TODO A storage model
** TODO A C++ getter/setter model
** TODO A JS getter/setter model
** TODO Use Critical Parameters
   1. Frame rate
   2. Update rate
   3. PAK file name
       
* INI File parser
  GNU Ragel can be used to write the parser.
** TODO Write parser
** TODO Load user's INI file for local modifications
** TODO Load system INI file for defaults
** TODO Hook to critical parameters list

* Console: Debug Menu and Viewer
  The debug menu uses the console to display a list of variables and
  commands.  Each menu entry does one of the following
  - boolean display and toggling
  - integer display and modification
  - fixed-point display and modification
  - run thunk command
  - jump to other menu
** TODO Hook to critical parameters list
** TODO Parse menu contents from some XML file?
** TODO Is this stupid?

* Sprites
  Sprites are stored as filmstrips with associated metadata
** TODO XML format for sprite filmstrips
** TODO Add sprite data to resource file
** TODO Add sprite data to resource cache
** TODO Associate TMX objects with TileD objects, somehow
** TODO Add sprites to renderer

* Level Editor
  TileD seems to be the easiest editor to integrate. There is a class
  structure and XML parser for TileD TMX files
  here. [https://github.com/andrewrk/tmxparser/] I can use that class
  structure directly.
** TODO Express TMX Objects as JS objects

* The Game
** The α layer - low-level paranoid wrapper
    Don't know if this is necessary, but, this would be regular
    library functions that are agressivly type-checked.

** The β layer - game subsystems
    In this layer are the game subsystems.  Menuing systems, objects
    that represent monsters or projectiles, and other such
    pseudoclasses.  For example,
    - Item Generator
    - Item System
    - Inventory System
    - Character System
    - Combat
    - NPC Dialog
    - NPC Actions
    - Vendor System
    - Crafting system
    - Achievements system
    - ToolTip system
    - Harvesting System
    - Quest System
    - Movable map objects
    
** The ɣ layers - game logic
    In this layer is the code that describes the game logic.

** The Data
   PNGs, TMXs, JS scripts, and WAVs

