#+TITLE: Project Burro Game Engine Implementation TODO
#+OPTIONS: todo:t

I'm giving up on the C+GLib+Gtk version of the engine because it will
never get finished.  I'm moving to a more traditional C++, SDL2
engine, but I still doing soft rendering in Cairo.

* Console Layer
  Create a bitmapped-font on-screen console for display text.
** DONE Write text drawing primitives in Cairo
** DONE Write ECMA-48 parser
** DONE Make a font

* Console: JS
  Express a JS console with command line editing, command-line history,
  and maybe even some tab completion.
** DONE Hook console IO into SpiderMonkey command requests
** DONE Make readline-like functionality work
** TODO Tab Completion

* Console: Debug Menu and Viewer
  The debug menu uses the console to display a list of variables and
  commands.  Each menu entry does one of the following
  - boolean display and toggling
  - integer display and modification
  - fixed-point display and modification
  - run thunk command
  - jump to other menu
** TODO Hook to critical parameters list
** TODO Parse menu contents from some XML file?
** TODO Is this stupid?

* Critical Parameters List
  A list of booleans, integer, fixed-point, or thunk variables that can be
  modified by the INI files and maybe a Debug Menu
** TODO A storage model
** TODO A C++ getter/setter model
** TODO A JS getter/setter model

* INI File parser
  GNU Ragel can be used to write the parser.
** TODO Write parser
** TODO Load user's INI file for local modifications
** TODO Load system INI file for defaults
** TODO Hook to critical parameters list

* Level Editor
  TileD seems to be the easiest editor to integrate. There is a class
  structure and XML parser for TildD tmx files
  here. [https://github.com/andrewrk/tmxparser/] I can use that class
  structure directly.
** TODO Be able to load TMX files from the PAK file.

* Renderer
  Switching to TileD as the level editor and using the TMX classes from
  tmxparser means that the Cairo renderer needs to be modified.
** TODO Render backgrounds directly from TMX data and from the
   resources in the resource cache.

* Resource Cache
  The resource cache loads TMX, PNG, JS, and WAV from the PAK file.
  It stores them in their intermediate forms, TmxMap classes, Cairo
  surfaces, JS text, and SDL_Mixer chuncks respectively
** TODO Loader for WAV
** TODO Loader for JS
** TODO Loader for PNG
** TODO Loader for TMX

* Resource File
  I'm using libiso9660++
** DONE Functions to extract subfiles from ISO
** TODO Scripts to assemble the ISO files from TMX, PNG, WAV, and JS
** TODO Write a map from PAK paths to resource IDs  


* The Game
** The α layer - low-level paranoid wrapper
    Don't know if this is necessary, but, this would be regular
    library functions that are agressivly type-checked.

** The β layer - game subsystems
    In this layer are the game subsystems.  Menuing systems, objects
    that represent monsters or projectiles, and other such
    pseudoclasses.  For example,
    - Item Generator
    - Item System
    - Inventory System
    - Character System
    - Combat
    - NPC Dialog
    - NPC Actions
    - Vendor System
    - Crafting system
    - Achievements system
    - ToolTip system
    - Harvesting System
    - Quest System
    - Movable map objects
    
** The ɣ layers - game logic
    In this layer is the code that describes the game logic.

** The Data
   PNGs, TMXs, JS scripts, and WAVs
