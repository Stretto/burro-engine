
* The Engine
** X layer - low-level paranoid C wrapper
    In the X layer are wrappers around the Glib, Gtk, Cairo, Pulseaudio, and Guile functions
    that agressivly assert input parameters and throw critical warnings when they fail.  This
    way they can either be treated as errors (during development) or be ignored during release.
    
** Y layer - game engine subsystems
    In this layer, the components that make up a 2D sprite-and-tile game engine are defined.
    Important components are the main loop, the audio engine, the sprite-and-tile display
    engine, and keyboard input.  There are also minor components like the INI file reader and
    the random number generator.  Graphics are stored in a specific dialect of TGA files,
    and the library to read them is here.  Songs are store in a text format and samples are stored
    in a binary format, and the library to read those formats are in here as well.
    
    Each subsystem will define its public API in a C header.
    
** Z layer - game engine main and scripting language
    In this layer is the top-level of the game engine and the interface to the scripting language.

    The basic idea is that there is a main loop, and about every 1/60 of a second, the engine
    releases control to the scripting language and calls a function called "update".  It
    presents to the scripting language an API that it may use during its "update" call.
    
    The API is described in C headers in the Y layer and then wrapped using SWIG into a
    scripting language API.

* The Game

** The α layer - low-level paranoid wrapper
    Don't know if this is necessary, but, this would be regular library functions that are
    agressivly type-checked.

** The β layer - game subsystems
    In this layer are the game subsystems.  Menuing systems, objects that represent monsters
    or projectiles, and other such pseudoclasses.
    For example,
    - Item Generator
    - Item System
    - Inventory System
    - Character System
    - Combat
    - NPC Dialog
    - NPC Actions
    - Vendor System
    - Crafting system
    - Achievements system
    - ToolTip system
    - Harvesting System
    - Quest System
    - Movable map objects
    
** The ɣ layers - game logic
    In this layer is the code that describes the game logic.

* The Data
    The data consists of TGA sprites and tiles, MIDI-like song files, and WAV audio files.

------------------    

* Debugging file - $(userdata)/$(project)/debug.ini
  The debugging file is a glib key-value file in the user config
  directory.
* User options storage $(userdata)/$(project)/options.ini
  A Glib key-value file in the user config directory



* Directories
If we followed all the specifications, data would be spread all over
the the filesystem.
** Savefiles - XDG_DATA_HOME
   when run in tree: $(topdir)/share
   when installed: g_get_user_data_dir()
** User configuration - XDG_CONFIG_HOME
   when run in tree: $(topdir)/config
   when installed: g_get_user_config_dir()
** Debug options - XDG_CONFIG_HOME
   when run in tree: $(topdir)/config
   when installed: g_get_user_config_dir()
** Graphical assets
   when run in tree: 
     $(topdir)/data/graphics
     $(topdir)/data/sound
   when installed: $(datadir)/PACKAGE/
** Scripts
   when run in tree:
     GUILE_LOAD_PATH is $(srcdir)/g
     GUILE_LOAD_COMPILED_PATH is also $(srcdir)/g
   when installed: $(datadir)/PACKAGE/scripts
     GUILE_LOAD_PATH is $(srcdir)/scripts
     GUILE_LOAD_COMPILED_PATH is also $(srcdir)/scripts
